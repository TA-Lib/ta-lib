/* TA-LIB Copyright (c) 1999-2003, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef TA_FUNC_H
#define TA_FUNC_H

#ifndef TA_COMMON_H
   #include "ta_common.h"
#endif

/* This header contains the prototype of all the Technical Analysis
 * function provided by TA-LIB.
 */

/* TA-LIB Developer Note: Do not modify this file, it is automaticaly
 *                        generated by gen_code.
 */
#ifdef __cplusplus
extern "C" {
#endif

#ifndef TA_DEFS_H
   #include "ta_defs.h"
#endif



/******************************************
 * Group: [Math Operators]
 ******************************************/

/*
 * TA_MAX - Highest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAX( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_MAX( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_MAX_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_MIN - Lowest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIN( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_MIN( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_MIN_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */



/******************************************
 * Group: [Overlap Studies]
 ******************************************/

/*
 * TA_BBANDS - Bollinger Bands
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDevUp_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for upper band
 * 
 * optInNbDevDn_2:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for lower band
 * 
 * optInMAType_3:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_BBANDS( int    startIdx,
                      int    endIdx,
                      const double inReal_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      double        optInNbDevUp_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInNbDevDn_2, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     optInMAType_3,
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outRealUpperBand_0[],
                      double        outRealMiddleBand_1[],
                      double        outRealLowerBand_2[] );

TA_RetCode TA_S_BBANDS( int    startIdx,
                        int    endIdx,
                        const float  inReal_0[],
                        int           optInTimePeriod_0, /* From 2 to 100000 */
                        double        optInNbDevUp_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                        double        optInNbDevDn_2, /* From TA_REAL_MIN to TA_REAL_MAX */
                        TA_MAType     optInMAType_3,
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outRealUpperBand_0[],
                        double        outRealMiddleBand_1[],
                        double        outRealLowerBand_2[] );

int TA_BBANDS_Lookback( int           optInTimePeriod_0, /* From 2 to 100000 */
                      double        optInNbDevUp_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInNbDevDn_2, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     optInMAType_3 ); 

/*
 * TA_DEMA - Double Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DEMA( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_DEMA( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_DEMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_EMA - Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_EMA( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_EMA( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_EMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_HT_TRENDLINE - Hilbert Transform - Instantaneous Trendline
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_TRENDLINE( int    startIdx,
                            int    endIdx,
                            const double inReal_0[],
                            int          *outBegIdx,
                            int          *outNbElement,
                            double        outReal_0[] );

TA_RetCode TA_S_HT_TRENDLINE( int    startIdx,
                              int    endIdx,
                              const float  inReal_0[],
                              int          *outBegIdx,
                              int          *outNbElement,
                              double        outReal_0[] );

int TA_HT_TRENDLINE_Lookback( void );


/*
 * TA_KAMA - Kaufman Adaptive Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_KAMA( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_KAMA( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_KAMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_MA - All Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * optInMAType_1:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_MA( int    startIdx,
                  int    endIdx,
                  const double inReal_0[],
                  int           optInTimePeriod_0, /* From 2 to 100000 */
                  TA_MAType     optInMAType_1,
                  int          *outBegIdx,
                  int          *outNbElement,
                  double        outReal_0[] );

TA_RetCode TA_S_MA( int    startIdx,
                    int    endIdx,
                    const float  inReal_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    TA_MAType     optInMAType_1,
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

int TA_MA_Lookback( int           optInTimePeriod_0, /* From 2 to 100000 */
                  TA_MAType     optInMAType_1 ); 

/*
 * TA_MAMA - MESA Adaptive Moving Average
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastLimit_0:(From 0.01 to 0.99)
 *    Upper limit use in the adaptive algorithm
 * 
 * optInSlowLimit_1:(From 0.01 to 0.99)
 *    Lower limit use in the adaptive algorithm
 * 
 * 
 */
TA_RetCode TA_MAMA( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    double        optInFastLimit_0, /* From 0.01 to 0.99 */
                    double        optInSlowLimit_1, /* From 0.01 to 0.99 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outMAMA_0[],
                    double        outFAMA_1[] );

TA_RetCode TA_S_MAMA( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      double        optInFastLimit_0, /* From 0.01 to 0.99 */
                      double        optInSlowLimit_1, /* From 0.01 to 0.99 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outMAMA_0[],
                      double        outFAMA_1[] );

int TA_MAMA_Lookback( double        optInFastLimit_0, /* From 0.01 to 0.99 */
                    double        optInSlowLimit_1 );  /* From 0.01 to 0.99 */


/*
 * TA_MIDPRICE - Midpoint Price over period
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPRICE( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        int           optInTimePeriod_0, /* From 2 to 100000 */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_MIDPRICE( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          int           optInTimePeriod_0, /* From 2 to 100000 */
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_MIDPRICE_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_MIDPOINT - MidPoint over period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPOINT( int    startIdx,
                        int    endIdx,
                        const double inReal_0[],
                        int           optInTimePeriod_0, /* From 2 to 100000 */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_MIDPOINT( int    startIdx,
                          int    endIdx,
                          const float  inReal_0[],
                          int           optInTimePeriod_0, /* From 2 to 100000 */
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_MIDPOINT_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_SAR - Parabolic SAR
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInAcceleration_0:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor used up to the Maximum value
 * 
 * optInMaximum_1:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor Maximum value
 * 
 * 
 */
TA_RetCode TA_SAR( int    startIdx,
                   int    endIdx,
                   const double inHigh_0[],
                   const double inLow_0[],
                   double        optInAcceleration_0, /* From 0 to TA_REAL_MAX */
                   double        optInMaximum_1, /* From 0 to TA_REAL_MAX */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_SAR( int    startIdx,
                     int    endIdx,
                     const float  inHigh_0[],
                     const float  inLow_0[],
                     double        optInAcceleration_0, /* From 0 to TA_REAL_MAX */
                     double        optInMaximum_1, /* From 0 to TA_REAL_MAX */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_SAR_Lookback( double        optInAcceleration_0, /* From 0 to TA_REAL_MAX */
                   double        optInMaximum_1 );  /* From 0 to TA_REAL_MAX */


/*
 * TA_SAREXT - Parabolic SAR - Extended
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInStartValue_0:(From 0 to TA_REAL_MAX)
 *    Start value and direction. 0 for Auto, >0 for Long, <0 for Short
 * 
 * optInOffsetOnReverse_1:(From 0 to TA_REAL_MAX)
 *    Percent offset added/removed to initial stop on short/long reversal
 * 
 * optInAccelerationInitLong_2:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Long direction
 * 
 * optInAccelerationLong_3:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Long direction
 * 
 * optInAccelerationMaxLong_4:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Long direction
 * 
 * optInAccelerationInitShort_5:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Short direction
 * 
 * optInAccelerationShort_6:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Short direction
 * 
 * optInAccelerationMaxShort_7:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Short direction
 * 
 * 
 */
TA_RetCode TA_SAREXT( int    startIdx,
                      int    endIdx,
                      const double inHigh_0[],
                      const double inLow_0[],
                      double        optInStartValue_0, /* From 0 to TA_REAL_MAX */
                      double        optInOffsetOnReverse_1, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitLong_2, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationLong_3, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxLong_4, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitShort_5, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationShort_6, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxShort_7, /* From 0 to TA_REAL_MAX */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

TA_RetCode TA_S_SAREXT( int    startIdx,
                        int    endIdx,
                        const float  inHigh_0[],
                        const float  inLow_0[],
                        double        optInStartValue_0, /* From 0 to TA_REAL_MAX */
                        double        optInOffsetOnReverse_1, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationInitLong_2, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationLong_3, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationMaxLong_4, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationInitShort_5, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationShort_6, /* From 0 to TA_REAL_MAX */
                        double        optInAccelerationMaxShort_7, /* From 0 to TA_REAL_MAX */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

int TA_SAREXT_Lookback( double        optInStartValue_0, /* From 0 to TA_REAL_MAX */
                      double        optInOffsetOnReverse_1, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitLong_2, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationLong_3, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxLong_4, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitShort_5, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationShort_6, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxShort_7 );  /* From 0 to TA_REAL_MAX */


/*
 * TA_SMA - Simple Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SMA( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_SMA( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_SMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_T3 - Triple Exponential Moving Average (T3)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * optInVFactor_1:(From 0 to 1)
 *    Volume Factor
 * 
 * 
 */
TA_RetCode TA_T3( int    startIdx,
                  int    endIdx,
                  const double inReal_0[],
                  int           optInTimePeriod_0, /* From 2 to 100000 */
                  double        optInVFactor_1, /* From 0 to 1 */
                  int          *outBegIdx,
                  int          *outNbElement,
                  double        outReal_0[] );

TA_RetCode TA_S_T3( int    startIdx,
                    int    endIdx,
                    const float  inReal_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    double        optInVFactor_1, /* From 0 to 1 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

int TA_T3_Lookback( int           optInTimePeriod_0, /* From 2 to 100000 */
                  double        optInVFactor_1 );  /* From 0 to 1 */


/*
 * TA_TEMA - Triple Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TEMA( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_TEMA( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_TEMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_TRIMA - Triangular Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIMA( int    startIdx,
                     int    endIdx,
                     const double inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

TA_RetCode TA_S_TRIMA( int    startIdx,
                       int    endIdx,
                       const float  inReal_0[],
                       int           optInTimePeriod_0, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

int TA_TRIMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_WMA - Weighted Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WMA( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_WMA( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_WMA_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */



/******************************************
 * Group: [Volatility Indicators]
 ******************************************/

/*
 * TA_ATR - Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ATR( int    startIdx,
                   int    endIdx,
                   const double inHigh_0[],
                   const double inLow_0[],
                   const double inClose_0[],
                   int           optInTimePeriod_0, /* From 1 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_ATR( int    startIdx,
                     int    endIdx,
                     const float  inHigh_0[],
                     const float  inLow_0[],
                     const float  inClose_0[],
                     int           optInTimePeriod_0, /* From 1 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_ATR_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_TRANGE - True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TRANGE( int    startIdx,
                      int    endIdx,
                      const double inHigh_0[],
                      const double inLow_0[],
                      const double inClose_0[],
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

TA_RetCode TA_S_TRANGE( int    startIdx,
                        int    endIdx,
                        const float  inHigh_0[],
                        const float  inLow_0[],
                        const float  inClose_0[],
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

int TA_TRANGE_Lookback( void );



/******************************************
 * Group: [Momentum Indicators]
 ******************************************/

/*
 * TA_ADX - Average Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADX( int    startIdx,
                   int    endIdx,
                   const double inHigh_0[],
                   const double inLow_0[],
                   const double inClose_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_ADX( int    startIdx,
                     int    endIdx,
                     const float  inHigh_0[],
                     const float  inLow_0[],
                     const float  inClose_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_ADX_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_ADXR - Average Directional Movement Index Rating
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADXR( int    startIdx,
                    int    endIdx,
                    const double inHigh_0[],
                    const double inLow_0[],
                    const double inClose_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_ADXR( int    startIdx,
                      int    endIdx,
                      const float  inHigh_0[],
                      const float  inLow_0[],
                      const float  inClose_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_ADXR_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_APO - Absolute Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType_2:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_APO( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInFastPeriod_0, /* From 2 to 100000 */
                   int           optInSlowPeriod_1, /* From 2 to 100000 */
                   TA_MAType     optInMAType_2,
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_APO( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInFastPeriod_0, /* From 2 to 100000 */
                     int           optInSlowPeriod_1, /* From 2 to 100000 */
                     TA_MAType     optInMAType_2,
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_APO_Lookback( int           optInFastPeriod_0, /* From 2 to 100000 */
                   int           optInSlowPeriod_1, /* From 2 to 100000 */
                   TA_MAType     optInMAType_2 ); 

/*
 * TA_AROON - Aroon
 * 
 * Input  = High, Low
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROON( int    startIdx,
                     int    endIdx,
                     const double inHigh_0[],
                     const double inLow_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outAroonDown_0[],
                     double        outAroonUp_1[] );

TA_RetCode TA_S_AROON( int    startIdx,
                       int    endIdx,
                       const float  inHigh_0[],
                       const float  inLow_0[],
                       int           optInTimePeriod_0, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outAroonDown_0[],
                       double        outAroonUp_1[] );

int TA_AROON_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_AROONOSC - Aroon Oscillator
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROONOSC( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        int           optInTimePeriod_0, /* From 2 to 100000 */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_AROONOSC( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          int           optInTimePeriod_0, /* From 2 to 100000 */
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_AROONOSC_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_CCI - Commodity Channel Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 5 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CCI( int    startIdx,
                   int    endIdx,
                   const double inHigh_0[],
                   const double inLow_0[],
                   const double inClose_0[],
                   int           optInTimePeriod_0, /* From 5 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_CCI( int    startIdx,
                     int    endIdx,
                     const float  inHigh_0[],
                     const float  inLow_0[],
                     const float  inClose_0[],
                     int           optInTimePeriod_0, /* From 5 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_CCI_Lookback( int           optInTimePeriod_0 );  /* From 5 to 100000 */


/*
 * TA_DX - Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DX( int    startIdx,
                  int    endIdx,
                  const double inHigh_0[],
                  const double inLow_0[],
                  const double inClose_0[],
                  int           optInTimePeriod_0, /* From 2 to 100000 */
                  int          *outBegIdx,
                  int          *outNbElement,
                  double        outReal_0[] );

TA_RetCode TA_S_DX( int    startIdx,
                    int    endIdx,
                    const float  inHigh_0[],
                    const float  inLow_0[],
                    const float  inClose_0[],
                    int           optInTimePeriod_0, /* From 2 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

int TA_DX_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_MACD - Moving Average Convergence/Divergence
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSignalPeriod_2:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACD( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInFastPeriod_0, /* From 2 to 100000 */
                    int           optInSlowPeriod_1, /* From 2 to 100000 */
                    int           optInSignalPeriod_2, /* From 1 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outMACD_0[],
                    double        outMACDSignal_1[],
                    double        outMACDHist_2[] );

TA_RetCode TA_S_MACD( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInFastPeriod_0, /* From 2 to 100000 */
                      int           optInSlowPeriod_1, /* From 2 to 100000 */
                      int           optInSignalPeriod_2, /* From 1 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outMACD_0[],
                      double        outMACDSignal_1[],
                      double        outMACDHist_2[] );

int TA_MACD_Lookback( int           optInFastPeriod_0, /* From 2 to 100000 */
                    int           optInSlowPeriod_1, /* From 2 to 100000 */
                    int           optInSignalPeriod_2 );  /* From 1 to 100000 */


/*
 * TA_MACDEXT - MACD with controllable MA type
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInFastMAType_1:
 *    Type of Moving Average for fast MA
 * 
 * optInSlowPeriod_2:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSlowMAType_3:
 *    Type of Moving Average for slow MA
 * 
 * optInSignalPeriod_4:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * optInSignalMAType_5:
 *    Type of Moving Average for signal line
 * 
 * 
 */
TA_RetCode TA_MACDEXT( int    startIdx,
                       int    endIdx,
                       const double inReal_0[],
                       int           optInFastPeriod_0, /* From 2 to 100000 */
                       TA_MAType     optInFastMAType_1,
                       int           optInSlowPeriod_2, /* From 2 to 100000 */
                       TA_MAType     optInSlowMAType_3,
                       int           optInSignalPeriod_4, /* From 1 to 100000 */
                       TA_MAType     optInSignalMAType_5,
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outMACD_0[],
                       double        outMACDSignal_1[],
                       double        outMACDHist_2[] );

TA_RetCode TA_S_MACDEXT( int    startIdx,
                         int    endIdx,
                         const float  inReal_0[],
                         int           optInFastPeriod_0, /* From 2 to 100000 */
                         TA_MAType     optInFastMAType_1,
                         int           optInSlowPeriod_2, /* From 2 to 100000 */
                         TA_MAType     optInSlowMAType_3,
                         int           optInSignalPeriod_4, /* From 1 to 100000 */
                         TA_MAType     optInSignalMAType_5,
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outMACD_0[],
                         double        outMACDSignal_1[],
                         double        outMACDHist_2[] );

int TA_MACDEXT_Lookback( int           optInFastPeriod_0, /* From 2 to 100000 */
                       TA_MAType     optInFastMAType_1,
                       int           optInSlowPeriod_2, /* From 2 to 100000 */
                       TA_MAType     optInSlowMAType_3,
                       int           optInSignalPeriod_4, /* From 1 to 100000 */
                       TA_MAType     optInSignalMAType_5 ); 

/*
 * TA_MACDFIX - Moving Average Convergence/Divergence Fix 12/26
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInSignalPeriod_0:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACDFIX( int    startIdx,
                       int    endIdx,
                       const double inReal_0[],
                       int           optInSignalPeriod_0, /* From 1 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outMACD_0[],
                       double        outMACDSignal_1[],
                       double        outMACDHist_2[] );

TA_RetCode TA_S_MACDFIX( int    startIdx,
                         int    endIdx,
                         const float  inReal_0[],
                         int           optInSignalPeriod_0, /* From 1 to 100000 */
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outMACD_0[],
                         double        outMACDSignal_1[],
                         double        outMACDHist_2[] );

int TA_MACDFIX_Lookback( int           optInSignalPeriod_0 );  /* From 1 to 100000 */


/*
 * TA_MFI - Money Flow Index
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MFI( int    startIdx,
                   int    endIdx,
                   const double inHigh_0[],
                   const double inLow_0[],
                   const double inClose_0[],
                   const int    inVolume_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_MFI( int    startIdx,
                     int    endIdx,
                     const float  inHigh_0[],
                     const float  inLow_0[],
                     const float  inClose_0[],
                     const int    inVolume_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_MFI_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_MINUS_DI - Minus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DI( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        const double inClose_0[],
                        int           optInTimePeriod_0, /* From 1 to 100000 */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_MINUS_DI( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          const float  inClose_0[],
                          int           optInTimePeriod_0, /* From 1 to 100000 */
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_MINUS_DI_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_MINUS_DM - Minus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DM( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        int           optInTimePeriod_0, /* From 1 to 100000 */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_MINUS_DM( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          int           optInTimePeriod_0, /* From 1 to 100000 */
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_MINUS_DM_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_MOM - Momentum
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MOM( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 1 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_MOM( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 1 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_MOM_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_PPO - Percentage Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType_2:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_PPO( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInFastPeriod_0, /* From 2 to 100000 */
                   int           optInSlowPeriod_1, /* From 2 to 100000 */
                   TA_MAType     optInMAType_2,
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_PPO( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInFastPeriod_0, /* From 2 to 100000 */
                     int           optInSlowPeriod_1, /* From 2 to 100000 */
                     TA_MAType     optInMAType_2,
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_PPO_Lookback( int           optInFastPeriod_0, /* From 2 to 100000 */
                   int           optInSlowPeriod_1, /* From 2 to 100000 */
                   TA_MAType     optInMAType_2 ); 

/*
 * TA_PLUS_DI - Plus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DI( int    startIdx,
                       int    endIdx,
                       const double inHigh_0[],
                       const double inLow_0[],
                       const double inClose_0[],
                       int           optInTimePeriod_0, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

TA_RetCode TA_S_PLUS_DI( int    startIdx,
                         int    endIdx,
                         const float  inHigh_0[],
                         const float  inLow_0[],
                         const float  inClose_0[],
                         int           optInTimePeriod_0, /* From 2 to 100000 */
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outReal_0[] );

int TA_PLUS_DI_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_PLUS_DM - Plus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DM( int    startIdx,
                       int    endIdx,
                       const double inHigh_0[],
                       const double inLow_0[],
                       int           optInTimePeriod_0, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

TA_RetCode TA_S_PLUS_DM( int    startIdx,
                         int    endIdx,
                         const float  inHigh_0[],
                         const float  inLow_0[],
                         int           optInTimePeriod_0, /* From 2 to 100000 */
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outReal_0[] );

int TA_PLUS_DM_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_ROC - Rate of change : ((price/prevPrice)-1)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROC( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 1 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_ROC( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 1 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_ROC_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCP( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 1 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_ROCP( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 1 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_ROCP_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_ROCR - Rate of change ratio: (price/prevPrice)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 1 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_ROCR( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 1 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_ROCR_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR100( int    startIdx,
                       int    endIdx,
                       const double inReal_0[],
                       int           optInTimePeriod_0, /* From 1 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

TA_RetCode TA_S_ROCR100( int    startIdx,
                         int    endIdx,
                         const float  inReal_0[],
                         int           optInTimePeriod_0, /* From 1 to 100000 */
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outReal_0[] );

int TA_ROCR100_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_RSI - Relative Strength Index
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_RSI( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_RSI( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_RSI_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_STOCH - Stochastic
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period_0:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInSlowK_Period_1:(From 1 to 100000)
 *    Smoothing for making the Slow-K line. Usually set to 3
 * 
 * optInSlowK_MAType_2:
 *    Type of Moving Average for Slow-K
 * 
 * optInSlowD_Period_3:(From 1 to 100000)
 *    Smoothing for making the Slow-D line
 * 
 * optInSlowD_MAType_4:
 *    Type of Moving Average for Slow-D
 * 
 * 
 */
TA_RetCode TA_STOCH( int    startIdx,
                     int    endIdx,
                     const double inHigh_0[],
                     const double inLow_0[],
                     const double inClose_0[],
                     int           optInFastK_Period_0, /* From 1 to 100000 */
                     int           optInSlowK_Period_1, /* From 1 to 100000 */
                     TA_MAType     optInSlowK_MAType_2,
                     int           optInSlowD_Period_3, /* From 1 to 100000 */
                     TA_MAType     optInSlowD_MAType_4,
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outSlowK_0[],
                     double        outSlowD_1[] );

TA_RetCode TA_S_STOCH( int    startIdx,
                       int    endIdx,
                       const float  inHigh_0[],
                       const float  inLow_0[],
                       const float  inClose_0[],
                       int           optInFastK_Period_0, /* From 1 to 100000 */
                       int           optInSlowK_Period_1, /* From 1 to 100000 */
                       TA_MAType     optInSlowK_MAType_2,
                       int           optInSlowD_Period_3, /* From 1 to 100000 */
                       TA_MAType     optInSlowD_MAType_4,
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outSlowK_0[],
                       double        outSlowD_1[] );

int TA_STOCH_Lookback( int           optInFastK_Period_0, /* From 1 to 100000 */
                     int           optInSlowK_Period_1, /* From 1 to 100000 */
                     TA_MAType     optInSlowK_MAType_2,
                     int           optInSlowD_Period_3, /* From 1 to 100000 */
                     TA_MAType     optInSlowD_MAType_4 ); 

/*
 * TA_STOCHF - Stochastic Fast
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period_0:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period_1:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType_2:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_RetCode TA_STOCHF( int    startIdx,
                      int    endIdx,
                      const double inHigh_0[],
                      const double inLow_0[],
                      const double inClose_0[],
                      int           optInFastK_Period_0, /* From 1 to 100000 */
                      int           optInFastD_Period_1, /* From 1 to 100000 */
                      TA_MAType     optInFastD_MAType_2,
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outFastK_0[],
                      double        outFastD_1[] );

TA_RetCode TA_S_STOCHF( int    startIdx,
                        int    endIdx,
                        const float  inHigh_0[],
                        const float  inLow_0[],
                        const float  inClose_0[],
                        int           optInFastK_Period_0, /* From 1 to 100000 */
                        int           optInFastD_Period_1, /* From 1 to 100000 */
                        TA_MAType     optInFastD_MAType_2,
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outFastK_0[],
                        double        outFastD_1[] );

int TA_STOCHF_Lookback( int           optInFastK_Period_0, /* From 1 to 100000 */
                      int           optInFastD_Period_1, /* From 1 to 100000 */
                      TA_MAType     optInFastD_MAType_2 ); 

/*
 * TA_TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIX( int    startIdx,
                    int    endIdx,
                    const double inReal_0[],
                    int           optInTimePeriod_0, /* From 1 to 100000 */
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

TA_RetCode TA_S_TRIX( int    startIdx,
                      int    endIdx,
                      const float  inReal_0[],
                      int           optInTimePeriod_0, /* From 1 to 100000 */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

int TA_TRIX_Lookback( int           optInTimePeriod_0 );  /* From 1 to 100000 */


/*
 * TA_WILLR - Williams' %R
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WILLR( int    startIdx,
                     int    endIdx,
                     const double inHigh_0[],
                     const double inLow_0[],
                     const double inClose_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

TA_RetCode TA_S_WILLR( int    startIdx,
                       int    endIdx,
                       const float  inHigh_0[],
                       const float  inLow_0[],
                       const float  inClose_0[],
                       int           optInTimePeriod_0, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

int TA_WILLR_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */



/******************************************
 * Group: [Cycle Indicators]
 ******************************************/

/*
 * TA_HT_DCPERIOD - Hilbert Transform - Dominant Cycle Period
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPERIOD( int    startIdx,
                           int    endIdx,
                           const double inReal_0[],
                           int          *outBegIdx,
                           int          *outNbElement,
                           double        outReal_0[] );

TA_RetCode TA_S_HT_DCPERIOD( int    startIdx,
                             int    endIdx,
                             const float  inReal_0[],
                             int          *outBegIdx,
                             int          *outNbElement,
                             double        outReal_0[] );

int TA_HT_DCPERIOD_Lookback( void );


/*
 * TA_HT_DCPHASE - Hilbert Transform - Dominant Cycle Phase
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPHASE( int    startIdx,
                          int    endIdx,
                          const double inReal_0[],
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

TA_RetCode TA_S_HT_DCPHASE( int    startIdx,
                            int    endIdx,
                            const float  inReal_0[],
                            int          *outBegIdx,
                            int          *outNbElement,
                            double        outReal_0[] );

int TA_HT_DCPHASE_Lookback( void );


/*
 * TA_HT_PHASOR - Hilbert Transform - Phasor Components
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_PHASOR( int    startIdx,
                         int    endIdx,
                         const double inReal_0[],
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outInPhase_0[],
                         double        outQuadrature_1[] );

TA_RetCode TA_S_HT_PHASOR( int    startIdx,
                           int    endIdx,
                           const float  inReal_0[],
                           int          *outBegIdx,
                           int          *outNbElement,
                           double        outInPhase_0[],
                           double        outQuadrature_1[] );

int TA_HT_PHASOR_Lookback( void );


/*
 * TA_HT_SINE - Hilbert Transform - SineWave
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_SINE( int    startIdx,
                       int    endIdx,
                       const double inReal_0[],
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outSine_0[],
                       double        outLeadSine_1[] );

TA_RetCode TA_S_HT_SINE( int    startIdx,
                         int    endIdx,
                         const float  inReal_0[],
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outSine_0[],
                         double        outLeadSine_1[] );

int TA_HT_SINE_Lookback( void );


/*
 * TA_HT_TRENDMODE - Hilbert Transform - Trend vs Cycle Mode
 * 
 * Input  = double
 * Output = int
 * 
 */
TA_RetCode TA_HT_TRENDMODE( int    startIdx,
                            int    endIdx,
                            const double inReal_0[],
                            int          *outBegIdx,
                            int          *outNbElement,
                            int           outInteger_0[] );

TA_RetCode TA_S_HT_TRENDMODE( int    startIdx,
                              int    endIdx,
                              const float  inReal_0[],
                              int          *outBegIdx,
                              int          *outNbElement,
                              int           outInteger_0[] );

int TA_HT_TRENDMODE_Lookback( void );



/******************************************
 * Group: [Volume Indicators]
 ******************************************/

/*
 * TA_AD - Chaikin A/D Line
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_AD( int    startIdx,
                  int    endIdx,
                  const double inHigh_0[],
                  const double inLow_0[],
                  const double inClose_0[],
                  const int    inVolume_0[],
                  int          *outBegIdx,
                  int          *outNbElement,
                  double        outReal_0[] );

TA_RetCode TA_S_AD( int    startIdx,
                    int    endIdx,
                    const float  inHigh_0[],
                    const float  inLow_0[],
                    const float  inClose_0[],
                    const int    inVolume_0[],
                    int          *outBegIdx,
                    int          *outNbElement,
                    double        outReal_0[] );

int TA_AD_Lookback( void );


/*
 * TA_ADOSC - Chaikin A/D Oscillator
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * 
 */
TA_RetCode TA_ADOSC( int    startIdx,
                     int    endIdx,
                     const double inHigh_0[],
                     const double inLow_0[],
                     const double inClose_0[],
                     const int    inVolume_0[],
                     int           optInFastPeriod_0, /* From 2 to 100000 */
                     int           optInSlowPeriod_1, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

TA_RetCode TA_S_ADOSC( int    startIdx,
                       int    endIdx,
                       const float  inHigh_0[],
                       const float  inLow_0[],
                       const float  inClose_0[],
                       const int    inVolume_0[],
                       int           optInFastPeriod_0, /* From 2 to 100000 */
                       int           optInSlowPeriod_1, /* From 2 to 100000 */
                       int          *outBegIdx,
                       int          *outNbElement,
                       double        outReal_0[] );

int TA_ADOSC_Lookback( int           optInFastPeriod_0, /* From 2 to 100000 */
                     int           optInSlowPeriod_1 );  /* From 2 to 100000 */


/*
 * TA_OBV - On Balance Volume
 * 
 * Input  = double, Volume
 * Output = int
 * 
 */
TA_RetCode TA_OBV( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   const int    inVolume_1[],
                   int          *outBegIdx,
                   int          *outNbElement,
                   int           outInteger_0[] );

TA_RetCode TA_S_OBV( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     const int    inVolume_1[],
                     int          *outBegIdx,
                     int          *outNbElement,
                     int           outInteger_0[] );

int TA_OBV_Lookback( void );



/******************************************
 * Group: [Statistic Functions]
 ******************************************/

/*
 * TA_LINEARREG - Linear Regression
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG( int    startIdx,
                         int    endIdx,
                         const double inReal_0[],
                         int           optInTimePeriod_0, /* From 2 to 100000 */
                         int          *outBegIdx,
                         int          *outNbElement,
                         double        outReal_0[] );

TA_RetCode TA_S_LINEARREG( int    startIdx,
                           int    endIdx,
                           const float  inReal_0[],
                           int           optInTimePeriod_0, /* From 2 to 100000 */
                           int          *outBegIdx,
                           int          *outNbElement,
                           double        outReal_0[] );

int TA_LINEARREG_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_LINEARREG_SLOPE - Linear Regression Slope
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_SLOPE( int    startIdx,
                               int    endIdx,
                               const double inReal_0[],
                               int           optInTimePeriod_0, /* From 2 to 100000 */
                               int          *outBegIdx,
                               int          *outNbElement,
                               double        outReal_0[] );

TA_RetCode TA_S_LINEARREG_SLOPE( int    startIdx,
                                 int    endIdx,
                                 const float  inReal_0[],
                                 int           optInTimePeriod_0, /* From 2 to 100000 */
                                 int          *outBegIdx,
                                 int          *outNbElement,
                                 double        outReal_0[] );

int TA_LINEARREG_SLOPE_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_LINEARREG_ANGLE - Linear Regression Angle
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_ANGLE( int    startIdx,
                               int    endIdx,
                               const double inReal_0[],
                               int           optInTimePeriod_0, /* From 2 to 100000 */
                               int          *outBegIdx,
                               int          *outNbElement,
                               double        outReal_0[] );

TA_RetCode TA_S_LINEARREG_ANGLE( int    startIdx,
                                 int    endIdx,
                                 const float  inReal_0[],
                                 int           optInTimePeriod_0, /* From 2 to 100000 */
                                 int          *outBegIdx,
                                 int          *outNbElement,
                                 double        outReal_0[] );

int TA_LINEARREG_ANGLE_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_LINEARREG_INTERCEPT - Linear Regression Intercept
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_INTERCEPT( int    startIdx,
                                   int    endIdx,
                                   const double inReal_0[],
                                   int           optInTimePeriod_0, /* From 2 to 100000 */
                                   int          *outBegIdx,
                                   int          *outNbElement,
                                   double        outReal_0[] );

TA_RetCode TA_S_LINEARREG_INTERCEPT( int    startIdx,
                                     int    endIdx,
                                     const float  inReal_0[],
                                     int           optInTimePeriod_0, /* From 2 to 100000 */
                                     int          *outBegIdx,
                                     int          *outNbElement,
                                     double        outReal_0[] );

int TA_LINEARREG_INTERCEPT_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_STDDEV - Standard Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDev_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_STDDEV( int    startIdx,
                      int    endIdx,
                      const double inReal_0[],
                      int           optInTimePeriod_0, /* From 2 to 100000 */
                      double        optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                      int          *outBegIdx,
                      int          *outNbElement,
                      double        outReal_0[] );

TA_RetCode TA_S_STDDEV( int    startIdx,
                        int    endIdx,
                        const float  inReal_0[],
                        int           optInTimePeriod_0, /* From 2 to 100000 */
                        double        optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

int TA_STDDEV_Lookback( int           optInTimePeriod_0, /* From 2 to 100000 */
                      double        optInNbDev_1 );  /* From TA_REAL_MIN to TA_REAL_MAX */


/*
 * TA_TSF - Time Series Forecast
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TSF( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 2 to 100000 */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_TSF( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 2 to 100000 */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_TSF_Lookback( int           optInTimePeriod_0 );  /* From 2 to 100000 */


/*
 * TA_VAR - Variance
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to 100000)
 *    Number of period
 * 
 * optInNbDev_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_VAR( int    startIdx,
                   int    endIdx,
                   const double inReal_0[],
                   int           optInTimePeriod_0, /* From 1 to 100000 */
                   double        optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                   int          *outBegIdx,
                   int          *outNbElement,
                   double        outReal_0[] );

TA_RetCode TA_S_VAR( int    startIdx,
                     int    endIdx,
                     const float  inReal_0[],
                     int           optInTimePeriod_0, /* From 1 to 100000 */
                     double        optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                     int          *outBegIdx,
                     int          *outNbElement,
                     double        outReal_0[] );

int TA_VAR_Lookback( int           optInTimePeriod_0, /* From 1 to 100000 */
                   double        optInNbDev_1 );  /* From TA_REAL_MIN to TA_REAL_MAX */



/******************************************
 * Group: [Price Transform]
 ******************************************/

/*
 * TA_AVGPRICE - Average Price
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_AVGPRICE( int    startIdx,
                        int    endIdx,
                        const double inOpen_0[],
                        const double inHigh_0[],
                        const double inLow_0[],
                        const double inClose_0[],
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_AVGPRICE( int    startIdx,
                          int    endIdx,
                          const float  inOpen_0[],
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          const float  inClose_0[],
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_AVGPRICE_Lookback( void );


/*
 * TA_MEDPRICE - Median Price
 * 
 * Input  = High, Low
 * Output = double
 * 
 */
TA_RetCode TA_MEDPRICE( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_MEDPRICE( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_MEDPRICE_Lookback( void );


/*
 * TA_TYPPRICE - Typical Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TYPPRICE( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        const double inClose_0[],
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_TYPPRICE( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          const float  inClose_0[],
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_TYPPRICE_Lookback( void );


/*
 * TA_WCLPRICE - Weighted Close Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_WCLPRICE( int    startIdx,
                        int    endIdx,
                        const double inHigh_0[],
                        const double inLow_0[],
                        const double inClose_0[],
                        int          *outBegIdx,
                        int          *outNbElement,
                        double        outReal_0[] );

TA_RetCode TA_S_WCLPRICE( int    startIdx,
                          int    endIdx,
                          const float  inHigh_0[],
                          const float  inLow_0[],
                          const float  inClose_0[],
                          int          *outBegIdx,
                          int          *outNbElement,
                          double        outReal_0[] );

int TA_WCLPRICE_Lookback( void );


/* Some TA functions takes a certain amount of input data
 * before stabilizing and outputing meaningful data. This is
 * a behavior pertaining to the algo of some TA functions and
 * is not particular to the TA-Lib implementation.
 * TA-Lib allows you to automatically strip off these unstabl
 * data from your output and from any internal processing.
 * (See documentation for more info)
 *
 * Examples:
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_EMA, 30 );
 *           Always strip off 30 price bar for the TA_EMA function.
 *
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_ALL, 30 );
 *           Always strip off 30 price bar from ALL functions
 *           having an unstable period.
 *
 * See ta_defs.h for the enumeration TA_FuncUnstId
 */

TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id,
                                 unsigned int  unstablePeriod );

unsigned int TA_GetUnstablePeriod( TA_FuncUnstId id );

/* You can change slightly the behavior of the TA functions
 * by requesting compatibiliy with some existing software.
 *
 * By default, the behavior is as close as the original 
 * author of the TA functions intend it to be.
 *
 * See ta_defs.h for the enumeration TA_Compatibility.
 */
TA_RetCode TA_SetCompatibility( TA_Compatibility value );
TA_Compatibility TA_GetCompatibility( void );

#ifdef __cplusplus
}
#endif

#endif

/***************/
/* End of File */
/***************/

