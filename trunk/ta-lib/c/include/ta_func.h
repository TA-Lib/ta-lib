/* TA-LIB Copyright (c) 1999-2002, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef TA_FUNC_H
#define TA_FUNC_H

#ifndef TA_COMMON_H
   #include "ta_common.h"
#endif

/* This header contains the prototype of all the Technical Analysis
 * function provided by TA-LIB.
 */

/* TA-LIB Developer Note: Do not modify this file, it is automaticaly
 *                        generated by gen_code.
 */
#ifdef __cplusplus
extern "C" {
#endif



/******************************************
 * Group: [Math Operators]
 ******************************************/

/*
 * TA_MAX - Highest value over a specified period
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAX( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_MAX_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_MIN - Lowest value over a specified period
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIN( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_MIN_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */



/******************************************
 * Group: [Overlap Studies]
 ******************************************/

/*
 * TA_BBANDS - Bollinger Bands
 * 
 * Input  = TA_Real
 * Output = TA_Real, TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * optInNbDevUp_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for upper band
 * 
 * optInNbDevDn_2:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for lower band
 * 
 * optInMethod_3:
 *    Type of Moving Average
 * 
 * 
 */

/* TA_BBANDS: Optional Parameter optInMethod_3 */
#define TA_BBANDS_SMA 0
#define TA_BBANDS_EMA 1
#define TA_BBANDS_WMA 2
#define TA_BBANDS_DEMA 3
#define TA_BBANDS_TEMA 4
#define TA_BBANDS_TRIMA 5
#define TA_BBANDS_KAMA 6

TA_RetCode TA_BBANDS( TA_Integer    startIdx,
                      TA_Integer    endIdx,
                      const TA_Real inReal_0[],
                      TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                      TA_Real       optInNbDevUp_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_Real       optInNbDevDn_2, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_Integer    optInMethod_3,
                      TA_Integer   *outBegIdx,
                      TA_Integer   *outNbElement,
                      TA_Real       outRealUpperBand_0[],
                      TA_Real       outRealMiddleBand_1[],
                      TA_Real       outRealLowerBand_2[] );

int TA_BBANDS_Lookback( TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                        TA_Real       optInNbDevUp_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                        TA_Real       optInNbDevDn_2, /* From TA_REAL_MIN to TA_REAL_MAX */
                        TA_Integer    optInMethod_3 ); 

/*
 * TA_DEMA - Double Exponential Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DEMA( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_DEMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_EMA - Exponential Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_EMA( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_EMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_KAMA - Kaufman Adaptive Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_KAMA( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_KAMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_MA - All Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * optInMethod_1:
 *    Type of Moving Average
 * 
 * 
 */

/* TA_MA: Optional Parameter optInMethod_1 */
#define TA_MA_SMA 0
#define TA_MA_EMA 1
#define TA_MA_WMA 2
#define TA_MA_DEMA 3
#define TA_MA_TEMA 4
#define TA_MA_TRIMA 5
#define TA_MA_KAMA 6

TA_RetCode TA_MA( TA_Integer    startIdx,
                  TA_Integer    endIdx,
                  const TA_Real inReal_0[],
                  TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                  TA_Integer    optInMethod_1,
                  TA_Integer   *outBegIdx,
                  TA_Integer   *outNbElement,
                  TA_Real       outReal_0[] );

int TA_MA_Lookback( TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer    optInMethod_1 ); 

/*
 * TA_MIDPRICE - Midpoint Price over period
 * 
 * Input  = High, Low
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPRICE( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_MIDPRICE_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_MIDPOINT - MidPoint over period
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPOINT( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inReal_0[],
                        TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_MIDPOINT_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_SAR - Parabolic SAR
 * 
 * Input  = High, Low
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInAcceleration_0:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Acceleration Factor used up to the Maximum parameter
 * 
 * optInMaximum_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Maximum value for the acceleration factor
 * 
 * 
 */
TA_RetCode TA_SAR( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inHigh_0[],
                   const TA_Real inLow_0[],
                   TA_Real       optInAcceleration_0, /* From TA_REAL_MIN to TA_REAL_MAX */
                   TA_Real       optInMaximum_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_SAR_Lookback( TA_Real       optInAcceleration_0, /* From TA_REAL_MIN to TA_REAL_MAX */
                     TA_Real       optInMaximum_1 );  /* From TA_REAL_MIN to TA_REAL_MAX */


/*
 * TA_SMA - Simple Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SMA( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_SMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_TEMA - Triple Exponential Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TEMA( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_TEMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_TRIMA - Triangular Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIMA( TA_Integer    startIdx,
                     TA_Integer    endIdx,
                     const TA_Real inReal_0[],
                     TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer   *outBegIdx,
                     TA_Integer   *outNbElement,
                     TA_Real       outReal_0[] );

int TA_TRIMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_WMA - Weighted Moving Average
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WMA( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_WMA_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */



/******************************************
 * Group: [Volatility Indicators]
 ******************************************/

/*
 * TA_ATR - Average True Range
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ATR( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inHigh_0[],
                   const TA_Real inLow_0[],
                   const TA_Real inClose_0[],
                   TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_ATR_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_TRANGE - True Range
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 */
TA_RetCode TA_TRANGE( TA_Integer    startIdx,
                      TA_Integer    endIdx,
                      const TA_Real inHigh_0[],
                      const TA_Real inLow_0[],
                      const TA_Real inClose_0[],
                      TA_Integer   *outBegIdx,
                      TA_Integer   *outNbElement,
                      TA_Real       outReal_0[] );

int TA_TRANGE_Lookback( void );



/******************************************
 * Group: [Momentum Indicators]
 ******************************************/

/*
 * TA_ADX - Average Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADX( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inHigh_0[],
                   const TA_Real inLow_0[],
                   const TA_Real inClose_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_ADX_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_ADXR - Average Directional Movement Index Rating
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADXR( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inHigh_0[],
                    const TA_Real inLow_0[],
                    const TA_Real inClose_0[],
                    TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_ADXR_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_APO - Absolute Price Oscillator
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the slow MA
 * 
 * optInMethod_2:
 *    Type of Moving Average
 * 
 * 
 */

/* TA_APO: Optional Parameter optInMethod_2 */
#define TA_APO_SMA 0
#define TA_APO_EMA 1
#define TA_APO_WMA 2
#define TA_APO_DEMA 3
#define TA_APO_TEMA 4
#define TA_APO_TRIMA 5
#define TA_APO_KAMA 6

TA_RetCode TA_APO( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer    optInMethod_2,
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_APO_Lookback( TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer    optInMethod_2 ); 

/*
 * TA_CCI - Commodity Channel Index
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 5 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CCI( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inHigh_0[],
                   const TA_Real inLow_0[],
                   const TA_Real inClose_0[],
                   TA_Integer    optInTimePeriod_0, /* From 5 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_CCI_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 5 to TA_INTEGER_MAX */


/*
 * TA_DX - Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DX( TA_Integer    startIdx,
                  TA_Integer    endIdx,
                  const TA_Real inHigh_0[],
                  const TA_Real inLow_0[],
                  const TA_Real inClose_0[],
                  TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                  TA_Integer   *outBegIdx,
                  TA_Integer   *outNbElement,
                  TA_Real       outReal_0[] );

int TA_DX_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_MACD - Moving Average Convergence/Divergence
 * 
 * Input  = TA_Real
 * Output = TA_Real, TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the slow MA
 * 
 * optInSignalPeriod_2:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACD( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                    TA_Integer    optInSignalPeriod_2, /* From 1 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outRealMACD_0[],
                    TA_Real       outRealMACDSignal_1[],
                    TA_Real       outRealMACDHist_2[] );

int TA_MACD_Lookback( TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                      TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                      TA_Integer    optInSignalPeriod_2 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_MACDEXT - MACD with controllable MA type
 * 
 * Input  = TA_Real
 * Output = TA_Real, TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the fast MA
 * 
 * optInFastMAType_1:
 *    Type of Moving Average for fast MA
 * 
 * optInSlowPeriod_2:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the slow MA
 * 
 * optInSlowMAType_3:
 *    Type of Moving Average for slow MA
 * 
 * optInSignalPeriod_4:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for the signal line (nb of period)
 * 
 * optInSignalMAType_5:
 *    Type of Moving Average for signal line
 * 
 * 
 */

/* TA_MACDEXT: Optional Parameter optInFastMAType_1 */
#define TA_MACDEXT_SMA 0
#define TA_MACDEXT_EMA 1
#define TA_MACDEXT_WMA 2
#define TA_MACDEXT_DEMA 3
#define TA_MACDEXT_TEMA 4
#define TA_MACDEXT_TRIMA 5
#define TA_MACDEXT_KAMA 6


/* TA_MACDEXT: Optional Parameter optInSlowMAType_3 */
#define TA_MACDEXT_SMA 0
#define TA_MACDEXT_EMA 1
#define TA_MACDEXT_WMA 2
#define TA_MACDEXT_DEMA 3
#define TA_MACDEXT_TEMA 4
#define TA_MACDEXT_TRIMA 5
#define TA_MACDEXT_KAMA 6


/* TA_MACDEXT: Optional Parameter optInSignalMAType_5 */
#define TA_MACDEXT_SMA 0
#define TA_MACDEXT_EMA 1
#define TA_MACDEXT_WMA 2
#define TA_MACDEXT_DEMA 3
#define TA_MACDEXT_TEMA 4
#define TA_MACDEXT_TRIMA 5
#define TA_MACDEXT_KAMA 6

TA_RetCode TA_MACDEXT( TA_Integer    startIdx,
                       TA_Integer    endIdx,
                       const TA_Real inReal_0[],
                       TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                       TA_Integer    optInFastMAType_1,
                       TA_Integer    optInSlowPeriod_2, /* From 2 to TA_INTEGER_MAX */
                       TA_Integer    optInSlowMAType_3,
                       TA_Integer    optInSignalPeriod_4, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer    optInSignalMAType_5,
                       TA_Integer   *outBegIdx,
                       TA_Integer   *outNbElement,
                       TA_Real       outRealMACD_0[],
                       TA_Real       outRealMACDSignal_1[],
                       TA_Real       outRealMACDHist_2[] );

int TA_MACDEXT_Lookback( TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                         TA_Integer    optInFastMAType_1,
                         TA_Integer    optInSlowPeriod_2, /* From 2 to TA_INTEGER_MAX */
                         TA_Integer    optInSlowMAType_3,
                         TA_Integer    optInSignalPeriod_4, /* From 1 to TA_INTEGER_MAX */
                         TA_Integer    optInSignalMAType_5 ); 

/*
 * TA_MACDFIX - Moving Average Convergence/Divergence Fix 12/26
 * 
 * Input  = TA_Real
 * Output = TA_Real, TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInSignalPeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACDFIX( TA_Integer    startIdx,
                       TA_Integer    endIdx,
                       const TA_Real inReal_0[],
                       TA_Integer    optInSignalPeriod_0, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer   *outBegIdx,
                       TA_Integer   *outNbElement,
                       TA_Real       outRealMACD_0[],
                       TA_Real       outRealMACDSignal_1[],
                       TA_Real       outRealMACDHist_2[] );

int TA_MACDFIX_Lookback( TA_Integer    optInSignalPeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_MFI - Money Flow Index
 * 
 * Input  = High, Low, Close, Volume
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MFI( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inHigh_0[],
                   const TA_Real inLow_0[],
                   const TA_Real inClose_0[],
                   const TA_Integer inVolume_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_MFI_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_MINUS_DI - Minus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DI( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        const TA_Real inClose_0[],
                        TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_MINUS_DI_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_MINUS_DM - Minus Directional Movement
 * 
 * Input  = High, Low
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DM( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_MINUS_DM_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_MOM - Momentum
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MOM( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_MOM_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_PPO - Percentage Price Oscillator
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod_1:(From 2 to TA_INTEGER_MAX)
 *    Number of period for the slow MA
 * 
 * optInMethod_2:
 *    Type of Moving Average
 * 
 * 
 */

/* TA_PPO: Optional Parameter optInMethod_2 */
#define TA_PPO_SMA 0
#define TA_PPO_EMA 1
#define TA_PPO_WMA 2
#define TA_PPO_DEMA 3
#define TA_PPO_TEMA 4
#define TA_PPO_TRIMA 5
#define TA_PPO_KAMA 6

TA_RetCode TA_PPO( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer    optInMethod_2,
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_PPO_Lookback( TA_Integer    optInFastPeriod_0, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer    optInSlowPeriod_1, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer    optInMethod_2 ); 

/*
 * TA_PLUS_DI - Plus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DI( TA_Integer    startIdx,
                       TA_Integer    endIdx,
                       const TA_Real inHigh_0[],
                       const TA_Real inLow_0[],
                       const TA_Real inClose_0[],
                       TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                       TA_Integer   *outBegIdx,
                       TA_Integer   *outNbElement,
                       TA_Real       outReal_0[] );

int TA_PLUS_DI_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_PLUS_DM - Plus Directional Movement
 * 
 * Input  = High, Low
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DM( TA_Integer    startIdx,
                       TA_Integer    endIdx,
                       const TA_Real inHigh_0[],
                       const TA_Real inLow_0[],
                       TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                       TA_Integer   *outBegIdx,
                       TA_Integer   *outNbElement,
                       TA_Real       outReal_0[] );

int TA_PLUS_DM_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_ROC - Rate of change : ((price/prevPrice)-1)*100
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROC( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_ROC_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCP( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_ROCP_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_ROCR - Rate of change ratio: (price/prevPrice)
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_ROCR_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR100( TA_Integer    startIdx,
                       TA_Integer    endIdx,
                       const TA_Real inReal_0[],
                       TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer   *outBegIdx,
                       TA_Integer   *outNbElement,
                       TA_Real       outReal_0[] );

int TA_ROCR100_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_RSI - Relative Strength Index
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_RSI( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_RSI_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */


/*
 * TA_STOCH - Stochastic
 * 
 * Input  = High, Low, Close
 * Output = TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period_0:(From 1 to TA_INTEGER_MAX)
 *    Time period for building the Fast-K line
 * 
 * optInSlowK_Period_1:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for making the Slow-K line. Usually set to 3
 * 
 * optInSlowK_MAType_2:
 *    Type of Moving Average for Slow-K
 * 
 * optInSlowD_Period_3:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for making the Slow-D line
 * 
 * optInSlowD_MAType_4:
 *    Type of Moving Average for Slow-D
 * 
 * 
 */

/* TA_STOCH: Optional Parameter optInSlowK_MAType_2 */
#define TA_STOCH_SMA 0
#define TA_STOCH_EMA 1
#define TA_STOCH_WMA 2
#define TA_STOCH_DEMA 3
#define TA_STOCH_TEMA 4
#define TA_STOCH_TRIMA 5
#define TA_STOCH_KAMA 6


/* TA_STOCH: Optional Parameter optInSlowD_MAType_4 */
#define TA_STOCH_SMA 0
#define TA_STOCH_EMA 1
#define TA_STOCH_WMA 2
#define TA_STOCH_DEMA 3
#define TA_STOCH_TEMA 4
#define TA_STOCH_TRIMA 5
#define TA_STOCH_KAMA 6

TA_RetCode TA_STOCH( TA_Integer    startIdx,
                     TA_Integer    endIdx,
                     const TA_Real inHigh_0[],
                     const TA_Real inLow_0[],
                     const TA_Real inClose_0[],
                     TA_Integer    optInFastK_Period_0, /* From 1 to TA_INTEGER_MAX */
                     TA_Integer    optInSlowK_Period_1, /* From 1 to TA_INTEGER_MAX */
                     TA_Integer    optInSlowK_MAType_2,
                     TA_Integer    optInSlowD_Period_3, /* From 1 to TA_INTEGER_MAX */
                     TA_Integer    optInSlowD_MAType_4,
                     TA_Integer   *outBegIdx,
                     TA_Integer   *outNbElement,
                     TA_Real       outSlowK_0[],
                     TA_Real       outSlowD_1[] );

int TA_STOCH_Lookback( TA_Integer    optInFastK_Period_0, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer    optInSlowK_Period_1, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer    optInSlowK_MAType_2,
                       TA_Integer    optInSlowD_Period_3, /* From 1 to TA_INTEGER_MAX */
                       TA_Integer    optInSlowD_MAType_4 ); 

/*
 * TA_STOCHF - Stochastic Fast
 * 
 * Input  = High, Low, Close
 * Output = TA_Real, TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period_0:(From 1 to TA_INTEGER_MAX)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period_1:(From 1 to TA_INTEGER_MAX)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType_2:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */

/* TA_STOCHF: Optional Parameter optInFastD_MAType_2 */
#define TA_STOCHF_SMA 0
#define TA_STOCHF_EMA 1
#define TA_STOCHF_WMA 2
#define TA_STOCHF_DEMA 3
#define TA_STOCHF_TEMA 4
#define TA_STOCHF_TRIMA 5
#define TA_STOCHF_KAMA 6

TA_RetCode TA_STOCHF( TA_Integer    startIdx,
                      TA_Integer    endIdx,
                      const TA_Real inHigh_0[],
                      const TA_Real inLow_0[],
                      const TA_Real inClose_0[],
                      TA_Integer    optInFastK_Period_0, /* From 1 to TA_INTEGER_MAX */
                      TA_Integer    optInFastD_Period_1, /* From 1 to TA_INTEGER_MAX */
                      TA_Integer    optInFastD_MAType_2,
                      TA_Integer   *outBegIdx,
                      TA_Integer   *outNbElement,
                      TA_Real       outFastK_0[],
                      TA_Real       outFastD_1[] );

int TA_STOCHF_Lookback( TA_Integer    optInFastK_Period_0, /* From 1 to TA_INTEGER_MAX */
                        TA_Integer    optInFastD_Period_1, /* From 1 to TA_INTEGER_MAX */
                        TA_Integer    optInFastD_MAType_2 ); 

/*
 * TA_TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIX( TA_Integer    startIdx,
                    TA_Integer    endIdx,
                    const TA_Real inReal_0[],
                    TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                    TA_Integer   *outBegIdx,
                    TA_Integer   *outNbElement,
                    TA_Real       outReal_0[] );

int TA_TRIX_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 1 to TA_INTEGER_MAX */


/*
 * TA_WILLR - Williams' %R
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WILLR( TA_Integer    startIdx,
                     TA_Integer    endIdx,
                     const TA_Real inHigh_0[],
                     const TA_Real inLow_0[],
                     const TA_Real inClose_0[],
                     TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                     TA_Integer   *outBegIdx,
                     TA_Integer   *outNbElement,
                     TA_Real       outReal_0[] );

int TA_WILLR_Lookback( TA_Integer    optInTimePeriod_0 );  /* From 2 to TA_INTEGER_MAX */



/******************************************
 * Group: [Volume Indicators]
 ******************************************/

/*
 * TA_OBV - On Balance Volume
 * 
 * Input  = TA_Real, Volume
 * Output = TA_Integer
 * 
 */
TA_RetCode TA_OBV( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   const TA_Integer inVolume_1[],
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Integer    outInteger_0[] );

int TA_OBV_Lookback( void );



/******************************************
 * Group: [Statistic Functions]
 ******************************************/

/*
 * TA_STDDEV - Standard Deviation
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 2 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * optInNbDev_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_STDDEV( TA_Integer    startIdx,
                      TA_Integer    endIdx,
                      const TA_Real inReal_0[],
                      TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                      TA_Real       optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_Integer   *outBegIdx,
                      TA_Integer   *outNbElement,
                      TA_Real       outReal_0[] );

int TA_STDDEV_Lookback( TA_Integer    optInTimePeriod_0, /* From 2 to TA_INTEGER_MAX */
                        TA_Real       optInNbDev_1 );  /* From TA_REAL_MIN to TA_REAL_MAX */


/*
 * TA_VAR - Variance
 * 
 * Input  = TA_Real
 * Output = TA_Real
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod_0:(From 1 to TA_INTEGER_MAX)
 *    Number of period
 * 
 * optInNbDev_1:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_VAR( TA_Integer    startIdx,
                   TA_Integer    endIdx,
                   const TA_Real inReal_0[],
                   TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                   TA_Real       optInNbDev_1, /* From TA_REAL_MIN to TA_REAL_MAX */
                   TA_Integer   *outBegIdx,
                   TA_Integer   *outNbElement,
                   TA_Real       outReal_0[] );

int TA_VAR_Lookback( TA_Integer    optInTimePeriod_0, /* From 1 to TA_INTEGER_MAX */
                     TA_Real       optInNbDev_1 );  /* From TA_REAL_MIN to TA_REAL_MAX */



/******************************************
 * Group: [Price Transform]
 ******************************************/

/*
 * TA_AVGPRICE - Average Price
 * 
 * Input  = Open, High, Low, Close
 * Output = TA_Real
 * 
 */
TA_RetCode TA_AVGPRICE( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inOpen_0[],
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        const TA_Real inClose_0[],
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_AVGPRICE_Lookback( void );


/*
 * TA_MEDPRICE - Median Price
 * 
 * Input  = High, Low
 * Output = TA_Real
 * 
 */
TA_RetCode TA_MEDPRICE( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_MEDPRICE_Lookback( void );


/*
 * TA_TYPPRICE - Typical Price
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 */
TA_RetCode TA_TYPPRICE( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        const TA_Real inClose_0[],
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_TYPPRICE_Lookback( void );


/*
 * TA_WCLPRICE - Weighted Close Price
 * 
 * Input  = High, Low, Close
 * Output = TA_Real
 * 
 */
TA_RetCode TA_WCLPRICE( TA_Integer    startIdx,
                        TA_Integer    endIdx,
                        const TA_Real inHigh_0[],
                        const TA_Real inLow_0[],
                        const TA_Real inClose_0[],
                        TA_Integer   *outBegIdx,
                        TA_Integer   *outNbElement,
                        TA_Real       outReal_0[] );

int TA_WCLPRICE_Lookback( void );


/* Some TA functions takes a certain amount of input data
 * before stabilizing and outputing meaningful data. This is
 * a behavior pertaining to the algo of some TA functions and
 * is not particular to the TA-Lib implementation.
 * TA-Lib allows you to automatically strip off these unstable
 * data from your output and from any internal processing.
 * (See documentation for more info)
 *
 * Examples:
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_EMA, 30 );
 *           Always strip off 30 price bar for the TA_EMA function.
 *
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_ALL, 30 );
 *           Always strip off 30 price bar from ALL functions
 *           having an unstable period.
 *
 */
typedef enum {
    /* 001 */  TA_FUNC_UNST_EMA,
    /* 002 */  TA_FUNC_UNST_KAMA,
    /* 003 */  TA_FUNC_UNST_ATR,
    /* 004 */  TA_FUNC_UNST_ADX,
    /* 005 */  TA_FUNC_UNST_ADXR,
    /* 006 */  TA_FUNC_UNST_DX,
    /* 007 */  TA_FUNC_UNST_MFI,
    /* 008 */  TA_FUNC_UNST_MINUS_DI,
    /* 009 */  TA_FUNC_UNST_MINUS_DM,
    /* 010 */  TA_FUNC_UNST_PLUS_DI,
    /* 011 */  TA_FUNC_UNST_PLUS_DM,
    /* 012 */  TA_FUNC_UNST_RSI,
               TA_FUNC_UNST_ALL,
               TA_FUNC_UNST_NONE=-1 } TA_FuncUnstId;

TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id,
                                 unsigned int  unstablePeriod );

unsigned int TA_GetUnstablePeriod( TA_FuncUnstId id );


typedef enum
{
  TA_COMPATIBILITY_DEFAULT,
  TA_COMPATIBILITY_METASTOCK,
} TA_Compatibility;

TA_RetCode TA_SetCompatibility( TA_Compatibility value );
TA_Compatibility TA_GetCompatibility( void );

#ifdef __cplusplus
}
#endif

#endif

/***************/
/* End of File */
/***************/

